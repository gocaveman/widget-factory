// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Widget is an object representing the database table.
type Widget struct {
	WidgetID    string      `boil:"widget_id" json:"widget_id" toml:"widget_id" yaml:"widget_id"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`

	R *widgetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L widgetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WidgetColumns = struct {
	WidgetID    string
	Name        string
	Description string
}{
	WidgetID:    "widget_id",
	Name:        "name",
	Description: "description",
}

// Generated where

var WidgetWhere = struct {
	WidgetID    whereHelperstring
	Name        whereHelperstring
	Description whereHelpernull_String
}{
	WidgetID:    whereHelperstring{field: "`widget`.`widget_id`"},
	Name:        whereHelperstring{field: "`widget`.`name`"},
	Description: whereHelpernull_String{field: "`widget`.`description`"},
}

// WidgetRels is where relationship names are stored.
var WidgetRels = struct {
	WidgetTags string
}{
	WidgetTags: "WidgetTags",
}

// widgetR is where relationships are stored.
type widgetR struct {
	WidgetTags WidgetTagSlice
}

// NewStruct creates a new relationship struct
func (*widgetR) NewStruct() *widgetR {
	return &widgetR{}
}

// widgetL is where Load methods for each relationship are stored.
type widgetL struct{}

var (
	widgetAllColumns            = []string{"widget_id", "name", "description"}
	widgetColumnsWithoutDefault = []string{"widget_id", "name", "description"}
	widgetColumnsWithDefault    = []string{}
	widgetPrimaryKeyColumns     = []string{"widget_id"}
)

type (
	// WidgetSlice is an alias for a slice of pointers to Widget.
	// This should generally be used opposed to []Widget.
	WidgetSlice []*Widget
	// WidgetHook is the signature for custom Widget hook methods
	WidgetHook func(context.Context, boil.ContextExecutor, *Widget) error

	widgetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	widgetType                 = reflect.TypeOf(&Widget{})
	widgetMapping              = queries.MakeStructMapping(widgetType)
	widgetPrimaryKeyMapping, _ = queries.BindMapping(widgetType, widgetMapping, widgetPrimaryKeyColumns)
	widgetInsertCacheMut       sync.RWMutex
	widgetInsertCache          = make(map[string]insertCache)
	widgetUpdateCacheMut       sync.RWMutex
	widgetUpdateCache          = make(map[string]updateCache)
	widgetUpsertCacheMut       sync.RWMutex
	widgetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var widgetBeforeInsertHooks []WidgetHook
var widgetBeforeUpdateHooks []WidgetHook
var widgetBeforeDeleteHooks []WidgetHook
var widgetBeforeUpsertHooks []WidgetHook

var widgetAfterInsertHooks []WidgetHook
var widgetAfterSelectHooks []WidgetHook
var widgetAfterUpdateHooks []WidgetHook
var widgetAfterDeleteHooks []WidgetHook
var widgetAfterUpsertHooks []WidgetHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Widget) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Widget) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Widget) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Widget) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Widget) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Widget) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Widget) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Widget) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Widget) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWidgetHook registers your hook function for all future operations.
func AddWidgetHook(hookPoint boil.HookPoint, widgetHook WidgetHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		widgetBeforeInsertHooks = append(widgetBeforeInsertHooks, widgetHook)
	case boil.BeforeUpdateHook:
		widgetBeforeUpdateHooks = append(widgetBeforeUpdateHooks, widgetHook)
	case boil.BeforeDeleteHook:
		widgetBeforeDeleteHooks = append(widgetBeforeDeleteHooks, widgetHook)
	case boil.BeforeUpsertHook:
		widgetBeforeUpsertHooks = append(widgetBeforeUpsertHooks, widgetHook)
	case boil.AfterInsertHook:
		widgetAfterInsertHooks = append(widgetAfterInsertHooks, widgetHook)
	case boil.AfterSelectHook:
		widgetAfterSelectHooks = append(widgetAfterSelectHooks, widgetHook)
	case boil.AfterUpdateHook:
		widgetAfterUpdateHooks = append(widgetAfterUpdateHooks, widgetHook)
	case boil.AfterDeleteHook:
		widgetAfterDeleteHooks = append(widgetAfterDeleteHooks, widgetHook)
	case boil.AfterUpsertHook:
		widgetAfterUpsertHooks = append(widgetAfterUpsertHooks, widgetHook)
	}
}

// One returns a single widget record from the query.
func (q widgetQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Widget, error) {
	o := &Widget{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for widget")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Widget records from the query.
func (q widgetQuery) All(ctx context.Context, exec boil.ContextExecutor) (WidgetSlice, error) {
	var o []*Widget

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Widget slice")
	}

	if len(widgetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Widget records in the query.
func (q widgetQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count widget rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q widgetQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if widget exists")
	}

	return count > 0, nil
}

// WidgetTags retrieves all the widget_tag's WidgetTags with an executor.
func (o *Widget) WidgetTags(mods ...qm.QueryMod) widgetTagQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`widget_tag`.`widget_id`=?", o.WidgetID),
	)

	query := WidgetTags(queryMods...)
	queries.SetFrom(query.Query, "`widget_tag`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`widget_tag`.*"})
	}

	return query
}

// LoadWidgetTags allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (widgetL) LoadWidgetTags(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWidget interface{}, mods queries.Applicator) error {
	var slice []*Widget
	var object *Widget

	if singular {
		object = maybeWidget.(*Widget)
	} else {
		slice = *maybeWidget.(*[]*Widget)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &widgetR{}
		}
		args = append(args, object.WidgetID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &widgetR{}
			}

			for _, a := range args {
				if a == obj.WidgetID {
					continue Outer
				}
			}

			args = append(args, obj.WidgetID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`widget_tag`), qm.WhereIn(`widget_tag.widget_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load widget_tag")
	}

	var resultSlice []*WidgetTag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice widget_tag")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on widget_tag")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for widget_tag")
	}

	if len(widgetTagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WidgetTags = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &widgetTagR{}
			}
			foreign.R.Widget = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.WidgetID == foreign.WidgetID {
				local.R.WidgetTags = append(local.R.WidgetTags, foreign)
				if foreign.R == nil {
					foreign.R = &widgetTagR{}
				}
				foreign.R.Widget = local
				break
			}
		}
	}

	return nil
}

// AddWidgetTags adds the given related objects to the existing relationships
// of the widget, optionally inserting them as new records.
// Appends related to o.R.WidgetTags.
// Sets related.R.Widget appropriately.
func (o *Widget) AddWidgetTags(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*WidgetTag) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WidgetID = o.WidgetID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `widget_tag` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"widget_id"}),
				strmangle.WhereClause("`", "`", 0, widgetTagPrimaryKeyColumns),
			)
			values := []interface{}{o.WidgetID, rel.WidgetTagID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WidgetID = o.WidgetID
		}
	}

	if o.R == nil {
		o.R = &widgetR{
			WidgetTags: related,
		}
	} else {
		o.R.WidgetTags = append(o.R.WidgetTags, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &widgetTagR{
				Widget: o,
			}
		} else {
			rel.R.Widget = o
		}
	}
	return nil
}

// Widgets retrieves all the records using an executor.
func Widgets(mods ...qm.QueryMod) widgetQuery {
	mods = append(mods, qm.From("`widget`"))
	return widgetQuery{NewQuery(mods...)}
}

// FindWidget retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWidget(ctx context.Context, exec boil.ContextExecutor, widgetID string, selectCols ...string) (*Widget, error) {
	widgetObj := &Widget{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `widget` where `widget_id`=?", sel,
	)

	q := queries.Raw(query, widgetID)

	err := q.Bind(ctx, exec, widgetObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from widget")
	}

	return widgetObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Widget) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no widget provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(widgetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	widgetInsertCacheMut.RLock()
	cache, cached := widgetInsertCache[key]
	widgetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			widgetAllColumns,
			widgetColumnsWithDefault,
			widgetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(widgetType, widgetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(widgetType, widgetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `widget` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `widget` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `widget` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, widgetPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into widget")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.WidgetID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for widget")
	}

CacheNoHooks:
	if !cached {
		widgetInsertCacheMut.Lock()
		widgetInsertCache[key] = cache
		widgetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Widget.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Widget) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	widgetUpdateCacheMut.RLock()
	cache, cached := widgetUpdateCache[key]
	widgetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			widgetAllColumns,
			widgetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update widget, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `widget` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, widgetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(widgetType, widgetMapping, append(wl, widgetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update widget row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for widget")
	}

	if !cached {
		widgetUpdateCacheMut.Lock()
		widgetUpdateCache[key] = cache
		widgetUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q widgetQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for widget")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for widget")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WidgetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), widgetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `widget` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, widgetPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in widget slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all widget")
	}
	return rowsAff, nil
}

var mySQLWidgetUniqueColumns = []string{
	"widget_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Widget) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no widget provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(widgetColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLWidgetUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	widgetUpsertCacheMut.RLock()
	cache, cached := widgetUpsertCache[key]
	widgetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			widgetAllColumns,
			widgetColumnsWithDefault,
			widgetColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			widgetAllColumns,
			widgetPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert widget, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "widget", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `widget` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(widgetType, widgetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(widgetType, widgetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for widget")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(widgetType, widgetMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for widget")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for widget")
	}

CacheNoHooks:
	if !cached {
		widgetUpsertCacheMut.Lock()
		widgetUpsertCache[key] = cache
		widgetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Widget record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Widget) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Widget provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), widgetPrimaryKeyMapping)
	sql := "DELETE FROM `widget` WHERE `widget_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from widget")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for widget")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q widgetQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no widgetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from widget")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for widget")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WidgetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(widgetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), widgetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `widget` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, widgetPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from widget slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for widget")
	}

	if len(widgetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Widget) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWidget(ctx, exec, o.WidgetID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WidgetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WidgetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), widgetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `widget`.* FROM `widget` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, widgetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WidgetSlice")
	}

	*o = slice

	return nil
}

// WidgetExists checks if the Widget row exists.
func WidgetExists(ctx context.Context, exec boil.ContextExecutor, widgetID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `widget` where `widget_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, widgetID)
	}

	row := exec.QueryRowContext(ctx, sql, widgetID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if widget exists")
	}

	return exists, nil
}
