// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// WidgetTag is an object representing the database table.
type WidgetTag struct {
	WidgetTagID int    `boil:"widget_tag_id" json:"widget_tag_id" toml:"widget_tag_id" yaml:"widget_tag_id"`
	WidgetID    string `boil:"widget_id" json:"widget_id" toml:"widget_id" yaml:"widget_id"`
	TagID       string `boil:"tag_id" json:"tag_id" toml:"tag_id" yaml:"tag_id"`

	R *widgetTagR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L widgetTagL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WidgetTagColumns = struct {
	WidgetTagID string
	WidgetID    string
	TagID       string
}{
	WidgetTagID: "widget_tag_id",
	WidgetID:    "widget_id",
	TagID:       "tag_id",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var WidgetTagWhere = struct {
	WidgetTagID whereHelperint
	WidgetID    whereHelperstring
	TagID       whereHelperstring
}{
	WidgetTagID: whereHelperint{field: "`widget_tag`.`widget_tag_id`"},
	WidgetID:    whereHelperstring{field: "`widget_tag`.`widget_id`"},
	TagID:       whereHelperstring{field: "`widget_tag`.`tag_id`"},
}

// WidgetTagRels is where relationship names are stored.
var WidgetTagRels = struct {
	Tag    string
	Widget string
}{
	Tag:    "Tag",
	Widget: "Widget",
}

// widgetTagR is where relationships are stored.
type widgetTagR struct {
	Tag    *Tag
	Widget *Widget
}

// NewStruct creates a new relationship struct
func (*widgetTagR) NewStruct() *widgetTagR {
	return &widgetTagR{}
}

// widgetTagL is where Load methods for each relationship are stored.
type widgetTagL struct{}

var (
	widgetTagAllColumns            = []string{"widget_tag_id", "widget_id", "tag_id"}
	widgetTagColumnsWithoutDefault = []string{"widget_id", "tag_id"}
	widgetTagColumnsWithDefault    = []string{"widget_tag_id"}
	widgetTagPrimaryKeyColumns     = []string{"widget_tag_id"}
)

type (
	// WidgetTagSlice is an alias for a slice of pointers to WidgetTag.
	// This should generally be used opposed to []WidgetTag.
	WidgetTagSlice []*WidgetTag
	// WidgetTagHook is the signature for custom WidgetTag hook methods
	WidgetTagHook func(context.Context, boil.ContextExecutor, *WidgetTag) error

	widgetTagQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	widgetTagType                 = reflect.TypeOf(&WidgetTag{})
	widgetTagMapping              = queries.MakeStructMapping(widgetTagType)
	widgetTagPrimaryKeyMapping, _ = queries.BindMapping(widgetTagType, widgetTagMapping, widgetTagPrimaryKeyColumns)
	widgetTagInsertCacheMut       sync.RWMutex
	widgetTagInsertCache          = make(map[string]insertCache)
	widgetTagUpdateCacheMut       sync.RWMutex
	widgetTagUpdateCache          = make(map[string]updateCache)
	widgetTagUpsertCacheMut       sync.RWMutex
	widgetTagUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var widgetTagBeforeInsertHooks []WidgetTagHook
var widgetTagBeforeUpdateHooks []WidgetTagHook
var widgetTagBeforeDeleteHooks []WidgetTagHook
var widgetTagBeforeUpsertHooks []WidgetTagHook

var widgetTagAfterInsertHooks []WidgetTagHook
var widgetTagAfterSelectHooks []WidgetTagHook
var widgetTagAfterUpdateHooks []WidgetTagHook
var widgetTagAfterDeleteHooks []WidgetTagHook
var widgetTagAfterUpsertHooks []WidgetTagHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WidgetTag) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetTagBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WidgetTag) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetTagBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WidgetTag) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetTagBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WidgetTag) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetTagBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WidgetTag) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetTagAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WidgetTag) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetTagAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WidgetTag) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetTagAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WidgetTag) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetTagAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WidgetTag) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetTagAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWidgetTagHook registers your hook function for all future operations.
func AddWidgetTagHook(hookPoint boil.HookPoint, widgetTagHook WidgetTagHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		widgetTagBeforeInsertHooks = append(widgetTagBeforeInsertHooks, widgetTagHook)
	case boil.BeforeUpdateHook:
		widgetTagBeforeUpdateHooks = append(widgetTagBeforeUpdateHooks, widgetTagHook)
	case boil.BeforeDeleteHook:
		widgetTagBeforeDeleteHooks = append(widgetTagBeforeDeleteHooks, widgetTagHook)
	case boil.BeforeUpsertHook:
		widgetTagBeforeUpsertHooks = append(widgetTagBeforeUpsertHooks, widgetTagHook)
	case boil.AfterInsertHook:
		widgetTagAfterInsertHooks = append(widgetTagAfterInsertHooks, widgetTagHook)
	case boil.AfterSelectHook:
		widgetTagAfterSelectHooks = append(widgetTagAfterSelectHooks, widgetTagHook)
	case boil.AfterUpdateHook:
		widgetTagAfterUpdateHooks = append(widgetTagAfterUpdateHooks, widgetTagHook)
	case boil.AfterDeleteHook:
		widgetTagAfterDeleteHooks = append(widgetTagAfterDeleteHooks, widgetTagHook)
	case boil.AfterUpsertHook:
		widgetTagAfterUpsertHooks = append(widgetTagAfterUpsertHooks, widgetTagHook)
	}
}

// One returns a single widgetTag record from the query.
func (q widgetTagQuery) One(ctx context.Context, exec boil.ContextExecutor) (*WidgetTag, error) {
	o := &WidgetTag{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for widget_tag")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all WidgetTag records from the query.
func (q widgetTagQuery) All(ctx context.Context, exec boil.ContextExecutor) (WidgetTagSlice, error) {
	var o []*WidgetTag

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to WidgetTag slice")
	}

	if len(widgetTagAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all WidgetTag records in the query.
func (q widgetTagQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count widget_tag rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q widgetTagQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if widget_tag exists")
	}

	return count > 0, nil
}

// Tag pointed to by the foreign key.
func (o *WidgetTag) Tag(mods ...qm.QueryMod) tagQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`tag_id` = ?", o.TagID),
	}

	queryMods = append(queryMods, mods...)

	query := Tags(queryMods...)
	queries.SetFrom(query.Query, "`tag`")

	return query
}

// Widget pointed to by the foreign key.
func (o *WidgetTag) Widget(mods ...qm.QueryMod) widgetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`widget_id` = ?", o.WidgetID),
	}

	queryMods = append(queryMods, mods...)

	query := Widgets(queryMods...)
	queries.SetFrom(query.Query, "`widget`")

	return query
}

// LoadTag allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (widgetTagL) LoadTag(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWidgetTag interface{}, mods queries.Applicator) error {
	var slice []*WidgetTag
	var object *WidgetTag

	if singular {
		object = maybeWidgetTag.(*WidgetTag)
	} else {
		slice = *maybeWidgetTag.(*[]*WidgetTag)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &widgetTagR{}
		}
		args = append(args, object.TagID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &widgetTagR{}
			}

			for _, a := range args {
				if a == obj.TagID {
					continue Outer
				}
			}

			args = append(args, obj.TagID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`tag`), qm.WhereIn(`tag.tag_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tag")
	}

	var resultSlice []*Tag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tag")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tag")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tag")
	}

	if len(widgetTagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tag = foreign
		if foreign.R == nil {
			foreign.R = &tagR{}
		}
		foreign.R.WidgetTags = append(foreign.R.WidgetTags, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TagID == foreign.TagID {
				local.R.Tag = foreign
				if foreign.R == nil {
					foreign.R = &tagR{}
				}
				foreign.R.WidgetTags = append(foreign.R.WidgetTags, local)
				break
			}
		}
	}

	return nil
}

// LoadWidget allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (widgetTagL) LoadWidget(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWidgetTag interface{}, mods queries.Applicator) error {
	var slice []*WidgetTag
	var object *WidgetTag

	if singular {
		object = maybeWidgetTag.(*WidgetTag)
	} else {
		slice = *maybeWidgetTag.(*[]*WidgetTag)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &widgetTagR{}
		}
		args = append(args, object.WidgetID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &widgetTagR{}
			}

			for _, a := range args {
				if a == obj.WidgetID {
					continue Outer
				}
			}

			args = append(args, obj.WidgetID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`widget`), qm.WhereIn(`widget.widget_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Widget")
	}

	var resultSlice []*Widget
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Widget")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for widget")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for widget")
	}

	if len(widgetTagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Widget = foreign
		if foreign.R == nil {
			foreign.R = &widgetR{}
		}
		foreign.R.WidgetTags = append(foreign.R.WidgetTags, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WidgetID == foreign.WidgetID {
				local.R.Widget = foreign
				if foreign.R == nil {
					foreign.R = &widgetR{}
				}
				foreign.R.WidgetTags = append(foreign.R.WidgetTags, local)
				break
			}
		}
	}

	return nil
}

// SetTag of the widgetTag to the related item.
// Sets o.R.Tag to related.
// Adds o to related.R.WidgetTags.
func (o *WidgetTag) SetTag(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tag) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `widget_tag` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"tag_id"}),
		strmangle.WhereClause("`", "`", 0, widgetTagPrimaryKeyColumns),
	)
	values := []interface{}{related.TagID, o.WidgetTagID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TagID = related.TagID
	if o.R == nil {
		o.R = &widgetTagR{
			Tag: related,
		}
	} else {
		o.R.Tag = related
	}

	if related.R == nil {
		related.R = &tagR{
			WidgetTags: WidgetTagSlice{o},
		}
	} else {
		related.R.WidgetTags = append(related.R.WidgetTags, o)
	}

	return nil
}

// SetWidget of the widgetTag to the related item.
// Sets o.R.Widget to related.
// Adds o to related.R.WidgetTags.
func (o *WidgetTag) SetWidget(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Widget) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `widget_tag` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"widget_id"}),
		strmangle.WhereClause("`", "`", 0, widgetTagPrimaryKeyColumns),
	)
	values := []interface{}{related.WidgetID, o.WidgetTagID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WidgetID = related.WidgetID
	if o.R == nil {
		o.R = &widgetTagR{
			Widget: related,
		}
	} else {
		o.R.Widget = related
	}

	if related.R == nil {
		related.R = &widgetR{
			WidgetTags: WidgetTagSlice{o},
		}
	} else {
		related.R.WidgetTags = append(related.R.WidgetTags, o)
	}

	return nil
}

// WidgetTags retrieves all the records using an executor.
func WidgetTags(mods ...qm.QueryMod) widgetTagQuery {
	mods = append(mods, qm.From("`widget_tag`"))
	return widgetTagQuery{NewQuery(mods...)}
}

// FindWidgetTag retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWidgetTag(ctx context.Context, exec boil.ContextExecutor, widgetTagID int, selectCols ...string) (*WidgetTag, error) {
	widgetTagObj := &WidgetTag{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `widget_tag` where `widget_tag_id`=?", sel,
	)

	q := queries.Raw(query, widgetTagID)

	err := q.Bind(ctx, exec, widgetTagObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from widget_tag")
	}

	return widgetTagObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WidgetTag) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no widget_tag provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(widgetTagColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	widgetTagInsertCacheMut.RLock()
	cache, cached := widgetTagInsertCache[key]
	widgetTagInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			widgetTagAllColumns,
			widgetTagColumnsWithDefault,
			widgetTagColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(widgetTagType, widgetTagMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(widgetTagType, widgetTagMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `widget_tag` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `widget_tag` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `widget_tag` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, widgetTagPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into widget_tag")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.WidgetTagID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == widgetTagMapping["WidgetTagID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.WidgetTagID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for widget_tag")
	}

CacheNoHooks:
	if !cached {
		widgetTagInsertCacheMut.Lock()
		widgetTagInsertCache[key] = cache
		widgetTagInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the WidgetTag.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WidgetTag) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	widgetTagUpdateCacheMut.RLock()
	cache, cached := widgetTagUpdateCache[key]
	widgetTagUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			widgetTagAllColumns,
			widgetTagPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update widget_tag, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `widget_tag` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, widgetTagPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(widgetTagType, widgetTagMapping, append(wl, widgetTagPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update widget_tag row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for widget_tag")
	}

	if !cached {
		widgetTagUpdateCacheMut.Lock()
		widgetTagUpdateCache[key] = cache
		widgetTagUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q widgetTagQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for widget_tag")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for widget_tag")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WidgetTagSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), widgetTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `widget_tag` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, widgetTagPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in widgetTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all widgetTag")
	}
	return rowsAff, nil
}

var mySQLWidgetTagUniqueColumns = []string{
	"widget_tag_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WidgetTag) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no widget_tag provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(widgetTagColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLWidgetTagUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	widgetTagUpsertCacheMut.RLock()
	cache, cached := widgetTagUpsertCache[key]
	widgetTagUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			widgetTagAllColumns,
			widgetTagColumnsWithDefault,
			widgetTagColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			widgetTagAllColumns,
			widgetTagPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert widget_tag, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "widget_tag", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `widget_tag` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(widgetTagType, widgetTagMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(widgetTagType, widgetTagMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for widget_tag")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.WidgetTagID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == widgetTagMapping["widget_tag_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(widgetTagType, widgetTagMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for widget_tag")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for widget_tag")
	}

CacheNoHooks:
	if !cached {
		widgetTagUpsertCacheMut.Lock()
		widgetTagUpsertCache[key] = cache
		widgetTagUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single WidgetTag record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WidgetTag) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no WidgetTag provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), widgetTagPrimaryKeyMapping)
	sql := "DELETE FROM `widget_tag` WHERE `widget_tag_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from widget_tag")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for widget_tag")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q widgetTagQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no widgetTagQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from widget_tag")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for widget_tag")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WidgetTagSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(widgetTagBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), widgetTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `widget_tag` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, widgetTagPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from widgetTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for widget_tag")
	}

	if len(widgetTagAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WidgetTag) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWidgetTag(ctx, exec, o.WidgetTagID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WidgetTagSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WidgetTagSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), widgetTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `widget_tag`.* FROM `widget_tag` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, widgetTagPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WidgetTagSlice")
	}

	*o = slice

	return nil
}

// WidgetTagExists checks if the WidgetTag row exists.
func WidgetTagExists(ctx context.Context, exec boil.ContextExecutor, widgetTagID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `widget_tag` where `widget_tag_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, widgetTagID)
	}

	row := exec.QueryRowContext(ctx, sql, widgetTagID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if widget_tag exists")
	}

	return exists, nil
}
