// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testWidgetTags(t *testing.T) {
	t.Parallel()

	query := WidgetTags()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testWidgetTagsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WidgetTag{}
	if err = randomize.Struct(seed, o, widgetTagDBTypes, true, widgetTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WidgetTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WidgetTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWidgetTagsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WidgetTag{}
	if err = randomize.Struct(seed, o, widgetTagDBTypes, true, widgetTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WidgetTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := WidgetTags().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WidgetTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWidgetTagsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WidgetTag{}
	if err = randomize.Struct(seed, o, widgetTagDBTypes, true, widgetTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WidgetTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WidgetTagSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WidgetTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWidgetTagsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WidgetTag{}
	if err = randomize.Struct(seed, o, widgetTagDBTypes, true, widgetTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WidgetTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := WidgetTagExists(ctx, tx, o.WidgetTagID)
	if err != nil {
		t.Errorf("Unable to check if WidgetTag exists: %s", err)
	}
	if !e {
		t.Errorf("Expected WidgetTagExists to return true, but got false.")
	}
}

func testWidgetTagsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WidgetTag{}
	if err = randomize.Struct(seed, o, widgetTagDBTypes, true, widgetTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WidgetTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	widgetTagFound, err := FindWidgetTag(ctx, tx, o.WidgetTagID)
	if err != nil {
		t.Error(err)
	}

	if widgetTagFound == nil {
		t.Error("want a record, got nil")
	}
}

func testWidgetTagsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WidgetTag{}
	if err = randomize.Struct(seed, o, widgetTagDBTypes, true, widgetTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WidgetTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = WidgetTags().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testWidgetTagsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WidgetTag{}
	if err = randomize.Struct(seed, o, widgetTagDBTypes, true, widgetTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WidgetTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := WidgetTags().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testWidgetTagsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	widgetTagOne := &WidgetTag{}
	widgetTagTwo := &WidgetTag{}
	if err = randomize.Struct(seed, widgetTagOne, widgetTagDBTypes, false, widgetTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WidgetTag struct: %s", err)
	}
	if err = randomize.Struct(seed, widgetTagTwo, widgetTagDBTypes, false, widgetTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WidgetTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = widgetTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = widgetTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := WidgetTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testWidgetTagsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	widgetTagOne := &WidgetTag{}
	widgetTagTwo := &WidgetTag{}
	if err = randomize.Struct(seed, widgetTagOne, widgetTagDBTypes, false, widgetTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WidgetTag struct: %s", err)
	}
	if err = randomize.Struct(seed, widgetTagTwo, widgetTagDBTypes, false, widgetTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WidgetTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = widgetTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = widgetTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WidgetTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func widgetTagBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *WidgetTag) error {
	*o = WidgetTag{}
	return nil
}

func widgetTagAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *WidgetTag) error {
	*o = WidgetTag{}
	return nil
}

func widgetTagAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *WidgetTag) error {
	*o = WidgetTag{}
	return nil
}

func widgetTagBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *WidgetTag) error {
	*o = WidgetTag{}
	return nil
}

func widgetTagAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *WidgetTag) error {
	*o = WidgetTag{}
	return nil
}

func widgetTagBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *WidgetTag) error {
	*o = WidgetTag{}
	return nil
}

func widgetTagAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *WidgetTag) error {
	*o = WidgetTag{}
	return nil
}

func widgetTagBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *WidgetTag) error {
	*o = WidgetTag{}
	return nil
}

func widgetTagAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *WidgetTag) error {
	*o = WidgetTag{}
	return nil
}

func testWidgetTagsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &WidgetTag{}
	o := &WidgetTag{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, widgetTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize WidgetTag object: %s", err)
	}

	AddWidgetTagHook(boil.BeforeInsertHook, widgetTagBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	widgetTagBeforeInsertHooks = []WidgetTagHook{}

	AddWidgetTagHook(boil.AfterInsertHook, widgetTagAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	widgetTagAfterInsertHooks = []WidgetTagHook{}

	AddWidgetTagHook(boil.AfterSelectHook, widgetTagAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	widgetTagAfterSelectHooks = []WidgetTagHook{}

	AddWidgetTagHook(boil.BeforeUpdateHook, widgetTagBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	widgetTagBeforeUpdateHooks = []WidgetTagHook{}

	AddWidgetTagHook(boil.AfterUpdateHook, widgetTagAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	widgetTagAfterUpdateHooks = []WidgetTagHook{}

	AddWidgetTagHook(boil.BeforeDeleteHook, widgetTagBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	widgetTagBeforeDeleteHooks = []WidgetTagHook{}

	AddWidgetTagHook(boil.AfterDeleteHook, widgetTagAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	widgetTagAfterDeleteHooks = []WidgetTagHook{}

	AddWidgetTagHook(boil.BeforeUpsertHook, widgetTagBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	widgetTagBeforeUpsertHooks = []WidgetTagHook{}

	AddWidgetTagHook(boil.AfterUpsertHook, widgetTagAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	widgetTagAfterUpsertHooks = []WidgetTagHook{}
}

func testWidgetTagsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WidgetTag{}
	if err = randomize.Struct(seed, o, widgetTagDBTypes, true, widgetTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WidgetTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WidgetTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWidgetTagsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WidgetTag{}
	if err = randomize.Struct(seed, o, widgetTagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WidgetTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(widgetTagColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := WidgetTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWidgetTagToOneTagUsingTag(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local WidgetTag
	var foreign Tag

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, widgetTagDBTypes, false, widgetTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WidgetTag struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tagDBTypes, false, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TagID = foreign.TagID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Tag().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.TagID != foreign.TagID {
		t.Errorf("want: %v, got %v", foreign.TagID, check.TagID)
	}

	slice := WidgetTagSlice{&local}
	if err = local.L.LoadTag(ctx, tx, false, (*[]*WidgetTag)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Tag = nil
	if err = local.L.LoadTag(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testWidgetTagToOneWidgetUsingWidget(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local WidgetTag
	var foreign Widget

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, widgetTagDBTypes, false, widgetTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WidgetTag struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, widgetDBTypes, false, widgetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Widget struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.WidgetID = foreign.WidgetID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Widget().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.WidgetID != foreign.WidgetID {
		t.Errorf("want: %v, got %v", foreign.WidgetID, check.WidgetID)
	}

	slice := WidgetTagSlice{&local}
	if err = local.L.LoadWidget(ctx, tx, false, (*[]*WidgetTag)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Widget == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Widget = nil
	if err = local.L.LoadWidget(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Widget == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testWidgetTagToOneSetOpTagUsingTag(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a WidgetTag
	var b, c Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, widgetTagDBTypes, false, strmangle.SetComplement(widgetTagPrimaryKeyColumns, widgetTagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Tag{&b, &c} {
		err = a.SetTag(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Tag != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.WidgetTags[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TagID != x.TagID {
			t.Error("foreign key was wrong value", a.TagID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TagID))
		reflect.Indirect(reflect.ValueOf(&a.TagID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TagID != x.TagID {
			t.Error("foreign key was wrong value", a.TagID, x.TagID)
		}
	}
}
func testWidgetTagToOneSetOpWidgetUsingWidget(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a WidgetTag
	var b, c Widget

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, widgetTagDBTypes, false, strmangle.SetComplement(widgetTagPrimaryKeyColumns, widgetTagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, widgetDBTypes, false, strmangle.SetComplement(widgetPrimaryKeyColumns, widgetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, widgetDBTypes, false, strmangle.SetComplement(widgetPrimaryKeyColumns, widgetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Widget{&b, &c} {
		err = a.SetWidget(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Widget != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.WidgetTags[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.WidgetID != x.WidgetID {
			t.Error("foreign key was wrong value", a.WidgetID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.WidgetID))
		reflect.Indirect(reflect.ValueOf(&a.WidgetID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.WidgetID != x.WidgetID {
			t.Error("foreign key was wrong value", a.WidgetID, x.WidgetID)
		}
	}
}

func testWidgetTagsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WidgetTag{}
	if err = randomize.Struct(seed, o, widgetTagDBTypes, true, widgetTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WidgetTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWidgetTagsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WidgetTag{}
	if err = randomize.Struct(seed, o, widgetTagDBTypes, true, widgetTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WidgetTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WidgetTagSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWidgetTagsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WidgetTag{}
	if err = randomize.Struct(seed, o, widgetTagDBTypes, true, widgetTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WidgetTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := WidgetTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	widgetTagDBTypes = map[string]string{`WidgetTagID`: `int`, `WidgetID`: `varchar`, `TagID`: `varchar`}
	_                = bytes.MinRead
)

func testWidgetTagsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(widgetTagPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(widgetTagAllColumns) == len(widgetTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &WidgetTag{}
	if err = randomize.Struct(seed, o, widgetTagDBTypes, true, widgetTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WidgetTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WidgetTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, widgetTagDBTypes, true, widgetTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WidgetTag struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testWidgetTagsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(widgetTagAllColumns) == len(widgetTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &WidgetTag{}
	if err = randomize.Struct(seed, o, widgetTagDBTypes, true, widgetTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WidgetTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WidgetTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, widgetTagDBTypes, true, widgetTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WidgetTag struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(widgetTagAllColumns, widgetTagPrimaryKeyColumns) {
		fields = widgetTagAllColumns
	} else {
		fields = strmangle.SetComplement(
			widgetTagAllColumns,
			widgetTagPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := WidgetTagSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testWidgetTagsUpsert(t *testing.T) {
	t.Parallel()

	if len(widgetTagAllColumns) == len(widgetTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLWidgetTagUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := WidgetTag{}
	if err = randomize.Struct(seed, &o, widgetTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize WidgetTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert WidgetTag: %s", err)
	}

	count, err := WidgetTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, widgetTagDBTypes, false, widgetTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WidgetTag struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert WidgetTag: %s", err)
	}

	count, err = WidgetTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
