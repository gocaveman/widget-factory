// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Tags", testTags)
	t.Run("Widgets", testWidgets)
	t.Run("WidgetTags", testWidgetTags)
}

func TestDelete(t *testing.T) {
	t.Run("Tags", testTagsDelete)
	t.Run("Widgets", testWidgetsDelete)
	t.Run("WidgetTags", testWidgetTagsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Tags", testTagsQueryDeleteAll)
	t.Run("Widgets", testWidgetsQueryDeleteAll)
	t.Run("WidgetTags", testWidgetTagsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Tags", testTagsSliceDeleteAll)
	t.Run("Widgets", testWidgetsSliceDeleteAll)
	t.Run("WidgetTags", testWidgetTagsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Tags", testTagsExists)
	t.Run("Widgets", testWidgetsExists)
	t.Run("WidgetTags", testWidgetTagsExists)
}

func TestFind(t *testing.T) {
	t.Run("Tags", testTagsFind)
	t.Run("Widgets", testWidgetsFind)
	t.Run("WidgetTags", testWidgetTagsFind)
}

func TestBind(t *testing.T) {
	t.Run("Tags", testTagsBind)
	t.Run("Widgets", testWidgetsBind)
	t.Run("WidgetTags", testWidgetTagsBind)
}

func TestOne(t *testing.T) {
	t.Run("Tags", testTagsOne)
	t.Run("Widgets", testWidgetsOne)
	t.Run("WidgetTags", testWidgetTagsOne)
}

func TestAll(t *testing.T) {
	t.Run("Tags", testTagsAll)
	t.Run("Widgets", testWidgetsAll)
	t.Run("WidgetTags", testWidgetTagsAll)
}

func TestCount(t *testing.T) {
	t.Run("Tags", testTagsCount)
	t.Run("Widgets", testWidgetsCount)
	t.Run("WidgetTags", testWidgetTagsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Tags", testTagsHooks)
	t.Run("Widgets", testWidgetsHooks)
	t.Run("WidgetTags", testWidgetTagsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Tags", testTagsInsert)
	t.Run("Tags", testTagsInsertWhitelist)
	t.Run("Widgets", testWidgetsInsert)
	t.Run("Widgets", testWidgetsInsertWhitelist)
	t.Run("WidgetTags", testWidgetTagsInsert)
	t.Run("WidgetTags", testWidgetTagsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("WidgetTagToTagUsingTag", testWidgetTagToOneTagUsingTag)
	t.Run("WidgetTagToWidgetUsingWidget", testWidgetTagToOneWidgetUsingWidget)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("TagToWidgetTags", testTagToManyWidgetTags)
	t.Run("WidgetToWidgetTags", testWidgetToManyWidgetTags)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("WidgetTagToTagUsingWidgetTags", testWidgetTagToOneSetOpTagUsingTag)
	t.Run("WidgetTagToWidgetUsingWidgetTags", testWidgetTagToOneSetOpWidgetUsingWidget)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("TagToWidgetTags", testTagToManyAddOpWidgetTags)
	t.Run("WidgetToWidgetTags", testWidgetToManyAddOpWidgetTags)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Tags", testTagsReload)
	t.Run("Widgets", testWidgetsReload)
	t.Run("WidgetTags", testWidgetTagsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Tags", testTagsReloadAll)
	t.Run("Widgets", testWidgetsReloadAll)
	t.Run("WidgetTags", testWidgetTagsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Tags", testTagsSelect)
	t.Run("Widgets", testWidgetsSelect)
	t.Run("WidgetTags", testWidgetTagsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Tags", testTagsUpdate)
	t.Run("Widgets", testWidgetsUpdate)
	t.Run("WidgetTags", testWidgetTagsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Tags", testTagsSliceUpdateAll)
	t.Run("Widgets", testWidgetsSliceUpdateAll)
	t.Run("WidgetTags", testWidgetTagsSliceUpdateAll)
}
